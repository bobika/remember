---
layout:     post
title:      "开始Python"
subtitle:   " \"人生苦短，要多学习\""
date:       2018-02-05
author:     "Bobika"
header-img: "img/Hello-bg.jpg"
catalog: true
tags:
    - Tech
    - Python
---
# 开始Python
>Python也不是第一门语言了，所以熟悉语法方面的知识会很快带过。虽然是跟着MOOC的课扫盲上过来的，但是代码还是敲了一遍，都是比较简单的测试用，其中我觉得会可能格外用到或者重要的地方会标注出来，同时也会更详细，可能会有后续补充。

<br>

### 下载安装
windows+python 3.6.4
下载安装包，安装即可

---
### 语法元素入门
**注释** 单行注释：\#注释内容; 多行注释：'''---注释内容--- '''  
> \#这一行会被注释掉

**输入** “input()”
> input()  \#代码中包含这一行会等待用户输入一个内容

**输出** “print()”
> 输出可以直接输出变量，也可以用“%”控制输出
  例如：print("The number is %f" % num)

**缩进**
> Python依赖缩进区分语法结构，所以缩进很重要，一个tab是一个缩进

**变量和命名**
>命名规则：使用大小写字母、数字和下划线的组合，但 **首字母只能是大小写字母或下划线** ，不能使用空格。 中文也可以作为名字。**且Python大小写敏感**。

**Python关键字**
> `` and, del, from, not, while, as, elif, global, or, with, assert, else, if, pass, yield, break, except, import, print, class, exec, in, raise, contiue, finally, is, return, def, for, lambda, try ``

**函数库引入**
> `` import turtle ``
> `` from turtle import *  ``

----

### 内置Turtle库
**Turtle库**
> Python内置图形化模块

**Turtle库使用**
> 一只小乌龟，在一个横轴为x、纵轴为y的坐标系原点位置(0,0)开始，它根据函数指令的控制,在平民啊坐标系中移动，从而在爬行的路径上绘制图形

**Turtle库简单操作示例**
> 1. Turtle绘制简单蟒蛇
  2. Turtle绘制树形
  3. Turtle绘制图形和颜色填充
  4. Turtle绘制时钟
  5. Turtle绘制雪地

**Turtle库快速参考**
> <img src="/img/in-post/post-python/quick-infe.png" />

----

### 数字类型与字符串
#### 数字类型
**Python语言包括三种数字类型**
> 1. 整数类型 
> 2. 浮点数类型
> 3. 复数类型

三种类型存在逐渐“扩展”关系：整数->浮点数->复数<br>
不同数字类型之间可以进行混合运算，运算后生成结果为最宽类型

**数字类型**：与数学中的整数概念一致， **没有取值范围限制**
> 1. **0x,0X开头表示16进制数**
> 2. **0b,0B开头表示2进制数**
> 3. **0o,0O开头表示8进制数**

**浮点数类型**：带有小数点及小数的数字，**数值范围存在限制，小数精度也存在限制，限制与不同的计算机系统有关。**
> 可以通过如下代码查看浮点数的限制：<br>
> ` import sys ` <br>
> ` sys.float_info `
> <br>
> 科学记数法：**为aeb = a*10^b**

**复数类型**：与数学中的复数概念一致，z = a + bj，a为实数被部分，b为虚数部分，a和b都是浮点类型，虚数部分用j或者J标识。
> 示例：12.3+5j<br>
> 对于一个复数z，可以用 **z.real**获得实数部分，**z.imag**获得虚数部分

**数字类型的转换**：三种类型可以相互转换
> 函数：` int() `, ` float() `,`complex()`
> 实例：<br>
> 1. `int(4.5) = 4`(直接去掉小数部分)
> 2. `float(4) = 4.0`(增加小数部分)
> 3. `complex(4) = 4 + 0j`
> **但是complex(4.5) = 4.5 + 0j是错的哦，不可以直接转换浮点类型和复数**

**数字类型的判断**：`type(x)`,返回x的类型，适用于所有类型的判断
**数字类型的运算**：
> 运算符和运算函数|操作含义
> ----|----
> x+y|x与y之和
> x-y|x与y之差
> x*y|x与y之积
> x/y|x与y之商
> x//y|不大于x与y之商的最大整数
> x%y|x与y之商的余数
> +x|x
> -x|x的负值
> x**y|x的y次幂
> abs(x)|x的绝对值
> divmod(x,y)|(x//y,x%y)
> pow(x,y)|x的y次幂

#### 字符串
* 字符串是用双引号`""`或者单引号`''`括起来的一个或者多个字符
* 字符串可以保存在变量中，也可以单独存在
* 可以用`type()`函数测试一个字符串的类型

**字符串索引**：字符串最左端位置标记为0，依次增加。字符串最后一位位置标记为-1，也可从右至左依次减少进行索引。
> greet[0:3]:输出的是0~2的数，即[0,2)   <br>
> greet[-3:-1]:输出的是-3~-2的数，即[-3,-2)

**字符串类型的转换**：函数`str()`
**字符串类型的操作**:此处用string代表字符串类型
>操作|含义
>----|----
>+|连接
>*|重复
>string[]|索引
>string[:]|剪切
>len(string)|长度
>string.upper()|字符串中字母大写
>string.lower()|字符串中字母小写
>string.strip()|去除两边空格及去指定字符
>string.split()|按指定字符分割字符串为数组
>string.join()|连接两个字符串序列
>string.find()|搜索指定字符串
>string.replace()|字符串替换
>for i in string:|字符串迭代

----

### 元组和列表
#### 元组
* 元组是包含多个元素的类型，元素之间用逗号分隔。 
  * 例如：t1 = 123,456, "hello"
* 元组可以是空的，t2=()
* 元组包含一个元素时：t3=123,
* 元组外侧可以使用括号，也可以不使用
* 元组可以作为另一个元组的元素，但是内部的元组需要增加括号
* 元组类型定义后不可以改变

#### 列表
* 列表(list)是有序的元素集合
* 可以通过索引访问单个元素

**列表的操作**:其中list代表一个列表
>列表操作符|操作符含义
>----|----
>list1+list2|连接两个列表
>list\*整数类型|对列表进行整数次重复
>list\[整数类型\]|索引列表中元素
>len(list)|列表中元素个数
>list\[整数类型:整数类型\]|取列表的一个子序列
>for i in list:|对列表进行循环列举
>i in list|成员检查，判断i是否在列表中

**列表的相关方法**:其中list代表一个列表
>方法|方法含义
>----|----
>list.append(x)|将元素x增加到列表的最后
>list.sort()|将列表元素排序
>list.reverse()|将序列元素反转
>list.index()|返回第一次出现元素x的索引值
>list.insert(i, x)|在位置i处插入新元素x
>list.count(x)|返回元素x在列表中的数量
>list.remove(x)|删除列表中第一次出现的元素x
>list.pop(i)|取出列表中位置i的元素，并删除它

#### 列表和元组的区别
* 类似
  * 列表和元组中的每个元素类型可以不一样
  * 访问列表中元素时采用索引形式
* 不同
  * 列表大小没有限制，可以随时修改

---

### math库和random库
#### math库
**常用的数学函数**
>函数|含义
>----|----
>圆周率pi|π的近似值，15位小数
>自然常数e|的近似值，15位小数
>ceil(x)|对浮点数向上取整
>floor(x)|对浮点数向下取整
>pow(x,y)|计算x的y次方
>log(x)|以e为基的对数
>log10(x)|以10为基的对数
>sqrt(x)|平方根
>exp(x)|e的x次幂
>degrees(x)|将弧度值转换成角度
>radians(x)|将角度值转换成弧度
>sin(x)|正弦函数
>cos(x)|余弦函数
>tan(x)|正切函数
>asin(x)|反正弦函数
>acos(x)|反余弦函数
>atan(x)|反正切函数

#### random库
**常用的random函数**
>函数|含义
>----|----
>seed(x)|给随机数一个种子值，默认随机种子是系统时钟
>random(x)|生成一个\[0,1.0)之间的随机小数
>uniform(a, b)|生成一个a到b之间的随机小数
>randint(a, b)|生成一个a到b之间的随机整数
>randrange(a, b, c)|随机生成一个从a开始到b以c递增的数
>choice(list)|从列表中随机返回一个元素
>shuffle(list)|将列表中元素随机打乱
>sample(list, k)|从指定列表随机获取k个元素

**使用**
> * 随机种子设定后，每次调用随机函数后生成的随机数都是相同的
> * 计算机的随机数是由一个种子开始的伪随机序列

**示例代码**
>1.计算π

---

### 程序基本结构
#### 分支
> * `if-else`
> * `if-elif-elif-else`

#### 循环
> * `for i in range(n)：`  \#i循环n次
> * `while true：` \#while后的表达式为真，执行循环
> * **continue 结束本次循环**，**break跳出整个循环**
> * **python中的else也可以和for语句搭配使用**

#### 异常处理
>`try:`
>`    body`
>`except errortype:`
>`    handler` 
>`finally:`
>`    handler`

#### 布尔表达式
>判断表达式真假，真为true，假为false<br>
>bananababanana~表达式怎么判断就不说了

---

### 函数与递归
#### 函数
> `def 函数名 (函数参数):`
> `    函数体`

#### 递归
递归就是函数调用函数本身啦，需要有一个结束，就不说啦

---

### 文件和字典
#### 文件基础
**文件的基本处理**

**实例**
> 1. 从文件读取数据画图
  2. 合并通讯录

#### 字典
 

实例
> 1. 获取词频

---

###对象
实例
> 1. 铅球飞行轨迹
---

### Python库安装
### Python OS编程
### 数学库的使用
#### numpy库
#### matplotlib库

